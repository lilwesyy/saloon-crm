import { setActivePinia, createPinia } from 'pinia'
import { useAppuntamentiStore } from '@/stores/appuntamenti'
import appuntamentiService from '@/services/appuntamenti.service'

// Mock the appuntamenti service
jest.mock('@/services/appuntamenti.service', () => ({
  default: {
    getAppuntamenti: jest.fn(),
    getAppuntamentoById: jest.fn(),
    createAppuntamento: jest.fn(),
    updateAppuntamento: jest.fn(),
    deleteAppuntamento: jest.fn(),
    updateStatoAppuntamento: jest.fn(),
    getAppuntamentiCalendario: jest.fn(),
    registraPagamento: jest.fn()
  }
}))

const mockedAppuntamentiService = appuntamentiService as jest.Mocked<typeof appuntamentiService>

describe('Appuntamenti Store', () => {
  beforeEach(() => {
    setActivePinia(createPinia())
    jest.clearAllMocks()
  })

  it('should initialize with default values', () => {
    const store = useAppuntamentiStore()
    expect(store.appuntamenti).toEqual([])
    expect(store.currentAppuntamento).toBeNull()
    expect(store.loading).toBe(false)
    expect(store.error).toBeNull()
    expect(store.pagination).toEqual({ current: 1, pages: 1, total: 0 })
  })

  describe('fetchAppuntamenti', () => {
    it('should set appuntamenti and pagination when API call succeeds', async () => {
      const mockAppuntamenti = [
        { 
          _id: '1', 
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          dataOraInizio: '2023-08-01T11:00:00Z',
          dataOraFine: '2023-08-01T12:00:00Z',
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          stato: 'prenotato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      const mockResponse = {
        appuntamenti: mockAppuntamenti,
        pagination: {
          current: 1,
          pages: 1,
          total: 2
        }
      }
      
      // Mock getAppuntamenti success
      mockedAppuntamentiService.getAppuntamenti.mockResolvedValue(mockResponse)
      
      const store = useAppuntamentiStore()
      await store.fetchAppuntamenti()
      
      expect(mockedAppuntamentiService.getAppuntamenti).toHaveBeenCalled()
      expect(store.appuntamenti).toEqual(mockAppuntamenti)
      expect(store.pagination).toEqual(mockResponse.pagination)
      expect(store.loading).toBe(false)
      expect(store.error).toBeNull()
    })

    it('should set error when API call fails', async () => {
      // Mock getAppuntamenti failure
      const errorMsg = 'Failed to fetch appointments'
      mockedAppuntamentiService.getAppuntamenti.mockRejectedValue(new Error(errorMsg))
      
      const store = useAppuntamentiStore()
      
      try {
        await store.fetchAppuntamenti()
        fail('Should have thrown an error')
      } catch (err) {
        expect(mockedAppuntamentiService.getAppuntamenti).toHaveBeenCalled()
        expect(store.loading).toBe(false)
        expect(store.error).toBe(errorMsg)
      }
    })
  })

  describe('fetchAppuntamentiByDate', () => {
    it('should call fetchAppuntamenti with date parameter', async () => {
      const mockDate = '2023-08-01'
      const mockAppuntamenti = [
        { 
          _id: '1', 
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          dataOraInizio: '2023-08-01T11:00:00Z',
          dataOraFine: '2023-08-01T12:00:00Z',
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          stato: 'prenotato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      const mockResponse = {
        appuntamenti: mockAppuntamenti,
        pagination: {
          current: 1,
          pages: 1,
          total: 2
        }
      }
      
      // Mock getAppuntamenti success with date filter
      mockedAppuntamentiService.getAppuntamenti.mockResolvedValue(mockResponse)
      
      const store = useAppuntamentiStore()
      await store.fetchAppuntamentiByDate(mockDate)
      
      expect(mockedAppuntamentiService.getAppuntamenti).toHaveBeenCalledWith({ data: mockDate })
      expect(store.appuntamenti).toEqual(mockAppuntamenti)
      expect(store.loading).toBe(false)
      expect(store.error).toBeNull()
    })
  })

  describe('updateStatoAppuntamento', () => {
    it('should update appointment status when API call succeeds', async () => {
      const mockAppuntamentoId = '1'
      const mockNewStatus = 'confermato'
      
      const mockAppuntamentoUpdated = {
        _id: mockAppuntamentoId,
        dataOraInizio: '2023-08-01T10:00:00Z',
        dataOraFine: '2023-08-01T11:00:00Z',
        cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
        servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
        operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
        stato: mockNewStatus,
        note: '',
        createdAt: '2023-08-01T09:00:00Z',
        updatedAt: '2023-08-01T09:00:00Z'
      }
      
      // Set initial appuntamenti array with the appointment to update
      const initialAppuntamenti = [
        { 
          _id: mockAppuntamentoId, 
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'prenotato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          dataOraInizio: '2023-08-01T11:00:00Z',
          dataOraFine: '2023-08-01T12:00:00Z',
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          stato: 'prenotato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      // Mock updateStatoAppuntamento success
      mockedAppuntamentiService.updateStatoAppuntamento.mockResolvedValue(mockAppuntamentoUpdated)
      
      const store = useAppuntamentiStore()
      store.$patch({ appuntamenti: initialAppuntamenti })
      
      await store.updateStatoAppuntamento(mockAppuntamentoId, mockNewStatus)
      
      expect(mockedAppuntamentiService.updateStatoAppuntamento).toHaveBeenCalledWith(mockAppuntamentoId, mockNewStatus)
      
      // The specific appointment should have been updated
      const updatedAppuntamento = store.appuntamenti.find(app => app._id === mockAppuntamentoId)
      expect(updatedAppuntamento?.stato).toBe(mockNewStatus)
      
      // The other appointment should remain unchanged
      const unchangedAppuntamento = store.appuntamenti.find(app => app._id === '2')
      expect(unchangedAppuntamento?.stato).toBe('prenotato')
    })

    it('should set error when API call fails', async () => {
      const mockAppuntamentoId = '1'
      const mockNewStatus = 'confermato'
      
      // Mock updateStatoAppuntamento failure
      const errorMsg = 'Could not update appointment status'
      mockedAppuntamentiService.updateStatoAppuntamento.mockRejectedValue(new Error(errorMsg))
      
      const store = useAppuntamentiStore()
      
      try {
        await store.updateStatoAppuntamento(mockAppuntamentoId, mockNewStatus)
        fail('Should have thrown an error')
      } catch (err) {
        expect(mockedAppuntamentiService.updateStatoAppuntamento).toHaveBeenCalledWith(mockAppuntamentoId, mockNewStatus)
        expect(store.loading).toBe(false)
        expect(store.error).toBe(errorMsg)
      }
    })
  })

  describe('getters', () => {
    it('totalAppuntamenti should return the total count', () => {
      const mockAppuntamenti = [
        { 
          _id: '1', 
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          dataOraInizio: '2023-08-01T11:00:00Z',
          dataOraFine: '2023-08-01T12:00:00Z',
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          stato: 'prenotato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      const store = useAppuntamentiStore()
      store.$patch({ appuntamenti: mockAppuntamenti })
      
      expect(store.totalAppuntamenti).toBe(2)
    })

    it('appuntamentiOggi should return today\'s appointments', () => {
      // Create a date object for today
      const today = new Date()
      const todayStr = today.toISOString().split('T')[0]
      
      // Create mock appointments with dates
      const mockAppuntamenti = [
        { 
          _id: '1', 
          dataOraInizio: `${todayStr}T10:00:00Z`,
          dataOraFine: `${todayStr}T11:00:00Z`,
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          dataOraInizio: `${todayStr}T14:00:00Z`,
          dataOraFine: `${todayStr}T15:00:00Z`,
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '3', 
          dataOraInizio: '2023-01-01T10:00:00Z',
          dataOraFine: '2023-01-01T11:00:00Z',
          cliente: { _id: 'c3', nome: 'Test3', cognome: 'User3' },
          servizi: [{ servizio: { _id: 's3', nome: 'Test Service 3', durata: 30, prezzo: 40 }, prezzo: 40 }],
          operatore: { _id: 'o3', nome: 'Test3', cognome: 'Operator3' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      const store = useAppuntamentiStore()
      store.$patch({ appuntamenti: mockAppuntamenti })
      
      expect(store.appuntamentiOggi.length).toBe(2)
      expect(store.appuntamentiOggi[0]._id).toBe('1')
      expect(store.appuntamentiOggi[1]._id).toBe('2')
    })

    it('appuntamentiByStato should group appointments by status', () => {
      const mockAppuntamenti = [
        { 
          _id: '1', 
          stato: 'prenotato' as const, 
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '2', 
          stato: 'confermato' as const, 
          dataOraInizio: '2023-08-01T11:00:00Z',
          dataOraFine: '2023-08-01T12:00:00Z',
          cliente: { _id: 'c2', nome: 'Test2', cognome: 'User2' },
          servizi: [{ servizio: { _id: 's2', nome: 'Test Service 2', durata: 45, prezzo: 60 }, prezzo: 60 }],
          operatore: { _id: 'o2', nome: 'Test2', cognome: 'Operator2' },
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '3', 
          stato: 'prenotato' as const, 
          dataOraInizio: '2023-08-01T12:00:00Z',
          dataOraFine: '2023-08-01T13:00:00Z',
          cliente: { _id: 'c3', nome: 'Test3', cognome: 'User3' },
          servizi: [{ servizio: { _id: 's3', nome: 'Test Service 3', durata: 30, prezzo: 40 }, prezzo: 40 }],
          operatore: { _id: 'o3', nome: 'Test3', cognome: 'Operator3' },
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        { 
          _id: '4', 
          stato: 'completato' as const, 
          dataOraInizio: '2023-08-01T13:00:00Z',
          dataOraFine: '2023-08-01T14:00:00Z',
          cliente: { _id: 'c4', nome: 'Test4', cognome: 'User4' },
          servizi: [{ servizio: { _id: 's4', nome: 'Test Service 4', durata: 60, prezzo: 70 }, prezzo: 70 }],
          operatore: { _id: 'o4', nome: 'Test4', cognome: 'Operator4' },
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }
      ]
      
      const store = useAppuntamentiStore()
      store.$patch({ appuntamenti: mockAppuntamenti })
      
      const result = store.appuntamentiByStato
      
      expect(result.prenotato).toHaveLength(2)
      expect(result.confermato).toHaveLength(1)
      expect(result.completato).toHaveLength(1)
      expect(result.annullato || []).toHaveLength(0)
      
      expect(result.prenotato).toContainEqual(mockAppuntamenti[0])
      expect(result.prenotato).toContainEqual(mockAppuntamenti[2])
      expect(result.confermato).toContainEqual(mockAppuntamenti[1])
      expect(result.completato).toContainEqual(mockAppuntamenti[3])
    })
  })

  describe('resetStore', () => {
    it('should reset all store values to defaults', () => {
      const store = useAppuntamentiStore()
      
      // Modify store values
      store.$patch({
        appuntamenti: [{ 
          _id: '1',
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        }],
        currentAppuntamento: { 
          _id: '1',
          dataOraInizio: '2023-08-01T10:00:00Z',
          dataOraFine: '2023-08-01T11:00:00Z',
          cliente: { _id: 'c1', nome: 'Test', cognome: 'User' },
          servizi: [{ servizio: { _id: 's1', nome: 'Test Service', durata: 30, prezzo: 50 }, prezzo: 50 }],
          operatore: { _id: 'o1', nome: 'Test', cognome: 'Operator' },
          stato: 'confermato' as const,
          note: '',
          createdAt: '2023-08-01T09:00:00Z',
          updatedAt: '2023-08-01T09:00:00Z'
        },
        loading: true,
        error: 'Some error',
        pagination: { current: 2, pages: 5, total: 23 }
      })
      
      // Reset the store
      store.resetStore()
      
      // Verify values were reset
      expect(store.appuntamenti).toEqual([])
      expect(store.currentAppuntamento).toBeNull()
      expect(store.loading).toBe(false)
      expect(store.error).toBeNull()
      expect(store.pagination).toEqual({ current: 1, pages: 1, total: 0 })
    })
  })
})
