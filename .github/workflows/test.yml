name: Saloon CRM Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test-backend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # Add multiple Node.js versions if needed

    services:
      mongodb:
        image: mongo:4.4
        ports:
          - 27017:27017

    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: backend/package-lock.json
    
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run backend tests
      working-directory: ./backend
      run: |
        npm run test
      env:
        CI: true
        NODE_ENV: test
        MONGODB_URI: mongodb://localhost:27017/esteticacrm_test
        JWT_SECRET: test_secret_key
    
    - name: Generate test coverage report
      working-directory: ./backend
      run: npm run test:coverage
    
    - name: Upload backend test coverage
      uses: actions/upload-artifact@v2
      with:
        name: backend-coverage
        path: backend/coverage
  
  test-frontend:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
    
    - name: Run frontend unit tests
      working-directory: ./frontend
      run: |
        npm run test:unit
      env:
        CI: true
    
    - name: Upload frontend test coverage
      uses: actions/upload-artifact@v2
      with:
        name: frontend-coverage
        path: frontend/coverage
        
  test-frontend-e2e:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
      
    - name: Use Node.js 16.x
      uses: actions/setup-node@v2
      with:
        node-version: 16.x
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Docker Compose up
      run: docker-compose -f docker-compose.frontend-test.yml up -d
      
    - name: Wait for services to be ready
      run: sleep 30
      
    - name: Run Cypress E2E tests
      working-directory: ./frontend
      run: npx cypress run
      env:
        CYPRESS_baseUrl: http://localhost:8080
        
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v2
      if: failure()
      with:
        name: cypress-screenshots
        path: frontend/cypress/screenshots
        
    - name: Docker Compose down
      run: docker-compose -f docker-compose.frontend-test.yml down

  docker-test:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    
    - name: Build and start Docker test environment
      run: |
        docker-compose -f docker-compose.test.yml build
        docker-compose -f docker-compose.test.yml up -d
    
    - name: Run end-to-end tests in Docker
      run: |
        docker-compose -f docker-compose.test.yml exec -T backend npm run test:e2e
    
    - name: Collect Docker logs
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml logs > docker-test-logs.txt
    
    - name: Upload Docker logs
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: docker-logs
        path: docker-test-logs.txt
    
    - name: Stop Docker containers
      if: always()
      run: docker-compose -f docker-compose.test.yml down
